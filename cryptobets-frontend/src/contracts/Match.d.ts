/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MatchInterface extends ethers.utils.Interface {
  functions: {
    "availableBetSlugsExist(uint64,string)": FunctionFragment;
    "bets(uint64,uint256)": FunctionFragment;
    "betsBySlug(uint64,string,uint256)": FunctionFragment;
    "betsByUsers(uint64,address,uint256)": FunctionFragment;
    "createMatch((uint64,uint8,uint256,string[],string[],bool))": FunctionFragment;
    "feeAddress()": FunctionFragment;
    "feePercent()": FunctionFragment;
    "getBetsByMatch(uint64)": FunctionFragment;
    "getBetsByUser(uint64)": FunctionFragment;
    "getMatch(uint64)": FunctionFragment;
    "getMatchAmountTotalBySlug(uint64,string)": FunctionFragment;
    "matchSlugsAmountTotal(uint64,string)": FunctionFragment;
    "matches(uint64)": FunctionFragment;
    "owner()": FunctionFragment;
    "placeBid(uint64,string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateMatch(uint64,uint8,string[])": FunctionFragment;
    "winningBetSlugsExist(uint64,string)": FunctionFragment;
    "withdraw(uint64)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "availableBetSlugsExist",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "bets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "betsBySlug",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "betsByUsers",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMatch",
    values: [
      {
        id: BigNumberish;
        status: BigNumberish;
        totalAmount: BigNumberish;
        availableBetSlugs: string[];
        winningBetSlugs: string[];
        isExist: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBetsByMatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBetsByUser",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMatchAmountTotalBySlug",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "matchSlugsAmountTotal",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "matches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMatch",
    values: [BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "winningBetSlugsExist",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "availableBetSlugsExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "betsBySlug", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "betsByUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBetsByMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBetsByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMatchAmountTotalBySlug",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchSlugsAmountTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "matches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winningBetSlugsExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "NewBet(uint64,tuple)": EventFragment;
    "NewMatch(tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Received(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewBet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
}

export type NewBetEvent = TypedEvent<
  [
    BigNumber,
    [string, string, BigNumber] & {
      owner: string;
      slug: string;
      amount: BigNumber;
    }
  ] & {
    arg0: BigNumber;
    arg1: [string, string, BigNumber] & {
      owner: string;
      slug: string;
      amount: BigNumber;
    };
  }
>;

export type NewMatchEvent = TypedEvent<
  [
    [BigNumber, number, BigNumber, string[], string[], boolean] & {
      id: BigNumber;
      status: number;
      totalAmount: BigNumber;
      availableBetSlugs: string[];
      winningBetSlugs: string[];
      isExist: boolean;
    }
  ] & {
    arg0: [BigNumber, number, BigNumber, string[], string[], boolean] & {
      id: BigNumber;
      status: number;
      totalAmount: BigNumber;
      availableBetSlugs: string[];
      winningBetSlugs: string[];
      isExist: boolean;
    };
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ReceivedEvent = TypedEvent<
  [string, BigNumber] & { arg0: string; arg1: BigNumber }
>;

export class Match extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MatchInterface;

  functions: {
    availableBetSlugsExist(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    bets(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        owner: string;
        slug: string;
        amount: BigNumber;
      }
    >;

    betsBySlug(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        owner: string;
        slug: string;
        amount: BigNumber;
      }
    >;

    betsByUsers(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        owner: string;
        slug: string;
        amount: BigNumber;
      }
    >;

    createMatch(
      _match: {
        id: BigNumberish;
        status: BigNumberish;
        totalAmount: BigNumberish;
        availableBetSlugs: string[];
        winningBetSlugs: string[];
        isExist: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<[string]>;

    feePercent(overrides?: CallOverrides): Promise<[number]>;

    getBetsByMatch(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, BigNumber] & {
          owner: string;
          slug: string;
          amount: BigNumber;
        })[]
      ]
    >;

    getBetsByUser(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, BigNumber] & {
          owner: string;
          slug: string;
          amount: BigNumber;
        })[]
      ]
    >;

    getMatch(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, number, BigNumber, string[], string[], boolean] & {
          id: BigNumber;
          status: number;
          totalAmount: BigNumber;
          availableBetSlugs: string[];
          winningBetSlugs: string[];
          isExist: boolean;
        }
      ]
    >;

    getMatchAmountTotalBySlug(
      _matchId: BigNumberish,
      _slug: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    matchSlugsAmountTotal(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    matches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, boolean] & {
        id: BigNumber;
        status: number;
        totalAmount: BigNumber;
        isExist: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    placeBid(
      _matchId: BigNumberish,
      _slugBet: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMatch(
      _matchId: BigNumberish,
      _status: BigNumberish,
      _winningBetSlugs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    winningBetSlugsExist(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      _matchId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  availableBetSlugsExist(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  bets(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      owner: string;
      slug: string;
      amount: BigNumber;
    }
  >;

  betsBySlug(
    arg0: BigNumberish,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      owner: string;
      slug: string;
      amount: BigNumber;
    }
  >;

  betsByUsers(
    arg0: BigNumberish,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      owner: string;
      slug: string;
      amount: BigNumber;
    }
  >;

  createMatch(
    _match: {
      id: BigNumberish;
      status: BigNumberish;
      totalAmount: BigNumberish;
      availableBetSlugs: string[];
      winningBetSlugs: string[];
      isExist: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeAddress(overrides?: CallOverrides): Promise<string>;

  feePercent(overrides?: CallOverrides): Promise<number>;

  getBetsByMatch(
    _matchId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([string, string, BigNumber] & {
      owner: string;
      slug: string;
      amount: BigNumber;
    })[]
  >;

  getBetsByUser(
    _matchId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([string, string, BigNumber] & {
      owner: string;
      slug: string;
      amount: BigNumber;
    })[]
  >;

  getMatch(
    _matchId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, string[], string[], boolean] & {
      id: BigNumber;
      status: number;
      totalAmount: BigNumber;
      availableBetSlugs: string[];
      winningBetSlugs: string[];
      isExist: boolean;
    }
  >;

  getMatchAmountTotalBySlug(
    _matchId: BigNumberish,
    _slug: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  matchSlugsAmountTotal(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  matches(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, boolean] & {
      id: BigNumber;
      status: number;
      totalAmount: BigNumber;
      isExist: boolean;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  placeBid(
    _matchId: BigNumberish,
    _slugBet: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMatch(
    _matchId: BigNumberish,
    _status: BigNumberish,
    _winningBetSlugs: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  winningBetSlugsExist(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    _matchId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    availableBetSlugsExist(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bets(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        owner: string;
        slug: string;
        amount: BigNumber;
      }
    >;

    betsBySlug(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        owner: string;
        slug: string;
        amount: BigNumber;
      }
    >;

    betsByUsers(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        owner: string;
        slug: string;
        amount: BigNumber;
      }
    >;

    createMatch(
      _match: {
        id: BigNumberish;
        status: BigNumberish;
        totalAmount: BigNumberish;
        availableBetSlugs: string[];
        winningBetSlugs: string[];
        isExist: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    feeAddress(overrides?: CallOverrides): Promise<string>;

    feePercent(overrides?: CallOverrides): Promise<number>;

    getBetsByMatch(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([string, string, BigNumber] & {
        owner: string;
        slug: string;
        amount: BigNumber;
      })[]
    >;

    getBetsByUser(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([string, string, BigNumber] & {
        owner: string;
        slug: string;
        amount: BigNumber;
      })[]
    >;

    getMatch(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, string[], string[], boolean] & {
        id: BigNumber;
        status: number;
        totalAmount: BigNumber;
        availableBetSlugs: string[];
        winningBetSlugs: string[];
        isExist: boolean;
      }
    >;

    getMatchAmountTotalBySlug(
      _matchId: BigNumberish,
      _slug: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchSlugsAmountTotal(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, boolean] & {
        id: BigNumber;
        status: number;
        totalAmount: BigNumber;
        isExist: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    placeBid(
      _matchId: BigNumberish,
      _slugBet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMatch(
      _matchId: BigNumberish,
      _status: BigNumberish,
      _winningBetSlugs: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    winningBetSlugsExist(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(_matchId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "NewBet(uint64,tuple)"(
      undefined?: null,
      undefined?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [string, string, BigNumber] & {
          owner: string;
          slug: string;
          amount: BigNumber;
        }
      ],
      {
        arg0: BigNumber;
        arg1: [string, string, BigNumber] & {
          owner: string;
          slug: string;
          amount: BigNumber;
        };
      }
    >;

    NewBet(
      undefined?: null,
      undefined?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [string, string, BigNumber] & {
          owner: string;
          slug: string;
          amount: BigNumber;
        }
      ],
      {
        arg0: BigNumber;
        arg1: [string, string, BigNumber] & {
          owner: string;
          slug: string;
          amount: BigNumber;
        };
      }
    >;

    "NewMatch(tuple)"(
      undefined?: null
    ): TypedEventFilter<
      [
        [BigNumber, number, BigNumber, string[], string[], boolean] & {
          id: BigNumber;
          status: number;
          totalAmount: BigNumber;
          availableBetSlugs: string[];
          winningBetSlugs: string[];
          isExist: boolean;
        }
      ],
      {
        arg0: [BigNumber, number, BigNumber, string[], string[], boolean] & {
          id: BigNumber;
          status: number;
          totalAmount: BigNumber;
          availableBetSlugs: string[];
          winningBetSlugs: string[];
          isExist: boolean;
        };
      }
    >;

    NewMatch(
      undefined?: null
    ): TypedEventFilter<
      [
        [BigNumber, number, BigNumber, string[], string[], boolean] & {
          id: BigNumber;
          status: number;
          totalAmount: BigNumber;
          availableBetSlugs: string[];
          winningBetSlugs: string[];
          isExist: boolean;
        }
      ],
      {
        arg0: [BigNumber, number, BigNumber, string[], string[], boolean] & {
          id: BigNumber;
          status: number;
          totalAmount: BigNumber;
          availableBetSlugs: string[];
          winningBetSlugs: string[];
          isExist: boolean;
        };
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Received(address,uint256)"(
      undefined?: null,
      undefined?: null
    ): TypedEventFilter<[string, BigNumber], { arg0: string; arg1: BigNumber }>;

    Received(
      undefined?: null,
      undefined?: null
    ): TypedEventFilter<[string, BigNumber], { arg0: string; arg1: BigNumber }>;
  };

  estimateGas: {
    availableBetSlugsExist(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bets(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    betsBySlug(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    betsByUsers(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createMatch(
      _match: {
        id: BigNumberish;
        status: BigNumberish;
        totalAmount: BigNumberish;
        availableBetSlugs: string[];
        winningBetSlugs: string[];
        isExist: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getBetsByMatch(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBetsByUser(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMatch(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMatchAmountTotalBySlug(
      _matchId: BigNumberish,
      _slug: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchSlugsAmountTotal(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matches(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    placeBid(
      _matchId: BigNumberish,
      _slugBet: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMatch(
      _matchId: BigNumberish,
      _status: BigNumberish,
      _winningBetSlugs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    winningBetSlugsExist(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _matchId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    availableBetSlugsExist(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bets(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    betsBySlug(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    betsByUsers(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createMatch(
      _match: {
        id: BigNumberish;
        status: BigNumberish;
        totalAmount: BigNumberish;
        availableBetSlugs: string[];
        winningBetSlugs: string[];
        isExist: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBetsByMatch(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBetsByUser(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMatch(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMatchAmountTotalBySlug(
      _matchId: BigNumberish,
      _slug: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchSlugsAmountTotal(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeBid(
      _matchId: BigNumberish,
      _slugBet: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMatch(
      _matchId: BigNumberish,
      _status: BigNumberish,
      _winningBetSlugs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    winningBetSlugsExist(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _matchId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
